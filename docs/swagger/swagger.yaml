basePath: /api/v1
definitions:
  constants.ErrorCode:
    enum:
    - "000001"
    - "000002"
    type: string
    x-enum-varnames:
    - COMMON_ERROR
    - EMAIL_UNVERIFIED
  constants.HttpStatusCode:
    enum:
    - 100
    - 101
    - 102
    - 103
    - 200
    - 201
    - 202
    - 203
    - 204
    - 205
    - 206
    - 207
    - 208
    - 226
    - 300
    - 301
    - 302
    - 303
    - 304
    - 305
    - 307
    - 308
    - 400
    - 401
    - 402
    - 403
    - 404
    - 405
    - 406
    - 407
    - 408
    - 409
    - 410
    - 411
    - 412
    - 413
    - 414
    - 415
    - 416
    - 417
    - 418
    - 421
    - 422
    - 423
    - 424
    - 425
    - 426
    - 428
    - 429
    - 431
    - 451
    - 500
    - 501
    - 502
    - 503
    - 504
    - 505
    - 506
    - 507
    - 508
    - 510
    - 511
    type: integer
    x-enum-varnames:
    - StatusContinue
    - StatusSwitchingProtocols
    - StatusProcessing
    - StatusEarlyHints
    - StatusOK
    - StatusCreated
    - StatusAccepted
    - StatusNonAuthoritativeInformation
    - StatusNoContent
    - StatusResetContent
    - StatusPartialContent
    - StatusMultiStatus
    - StatusAlreadyReported
    - StatusIMUsed
    - StatusMultipleChoices
    - StatusMovedPermanently
    - StatusFound
    - StatusSeeOther
    - StatusNotModified
    - StatusUseProxy
    - StatusTemporaryRedirect
    - StatusPermanentRedirect
    - StatusBadRequest
    - StatusUnauthorized
    - StatusPaymentRequired
    - StatusForbidden
    - StatusNotFound
    - StatusMethodNotAllowed
    - StatusNotAcceptable
    - StatusProxyAuthRequired
    - StatusRequestTimeout
    - StatusConflict
    - StatusGone
    - StatusLengthRequired
    - StatusPreconditionFailed
    - StatusRequestEntityTooLarge
    - StatusRequestURITooLong
    - StatusUnsupportedMediaType
    - StatusRequestedRangeNotSatisfiable
    - StatusExpectationFailed
    - StatusTeapot
    - StatusMisdirectedRequest
    - StatusUnprocessableEntity
    - StatusLocked
    - StatusFailedDependency
    - StatusTooEarly
    - StatusUpgradeRequired
    - StatusPreconditionRequired
    - StatusTooManyRequests
    - StatusRequestHeaderFieldsTooLarge
    - StatusUnavailableForLegalReasons
    - StatusInternalServerError
    - StatusNotImplemented
    - StatusBadGateway
    - StatusServiceUnavailable
    - StatusGatewayTimeout
    - StatusHTTPVersionNotSupported
    - StatusVariantAlsoNegotiates
    - StatusInsufficientStorage
    - StatusLoopDetected
    - StatusNotExtended
    - StatusNetworkAuthenticationRequired
  request.ForgotPasswordRequest:
    properties:
      email:
        type: string
    type: object
  request.RefreshTokenRequest:
    properties:
      sessionId:
        type: string
    type: object
  request.ResetPasswordRequest:
    properties:
      confirmPassword:
        type: string
      email:
        type: string
      password:
        type: string
      token:
        type: string
    type: object
  request.SendEmailOTPRequest:
    properties:
      email:
        type: string
    type: object
  request.SignInRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  request.SignUpRequest:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
    type: object
  request.VerifyEmailOTPRequest:
    properties:
      email:
        type: string
      otp:
        type: string
    type: object
  request.VerifyResetTokenRequest:
    properties:
      email:
        type: string
      token:
        type: string
    type: object
  response.BaseResponse:
    properties:
      code:
        $ref: '#/definitions/constants.HttpStatusCode'
      data: {}
      error_code:
        $ref: '#/definitions/constants.ErrorCode'
      message:
        type: string
      pagination:
        $ref: '#/definitions/response.Pagination'
      status:
        type: string
      timestamp:
        type: string
      trace: {}
    type: object
  response.EmailVerificationResponse:
    properties:
      emailVerified:
        type: boolean
    type: object
  response.GitHubRepositoryResponse:
    properties:
      clone_url:
        type: string
      created_at:
        type: string
      description:
        type: string
      fork:
        type: boolean
      full_name:
        type: string
      id:
        type: integer
      language:
        type: string
      name:
        type: string
      private:
        type: boolean
      updated_at:
        type: string
      url:
        type: string
    type: object
  response.Pagination:
    properties:
      page:
        type: integer
      pages:
        type: integer
      per_page:
        type: integer
      total:
        type: integer
    type: object
  response.RefreshTokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  response.SignInResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      session_id:
        type: string
      user:
        $ref: '#/definitions/response.UserResponse'
    type: object
  response.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      status:
        type: integer
      updated_at:
        type: string
    type: object
  service.GitHubRepository:
    properties:
      clone_url:
        type: string
      created_at:
        type: string
      description:
        type: string
      fork:
        type: boolean
      full_name:
        type: string
      html_url:
        type: string
      id:
        type: integer
      language:
        type: string
      name:
        type: string
      private:
        type: boolean
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: your.email@example.com
    name: API Support
  description: A RESTful API built with Go, Fiber, and PostgreSQL
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go Postgres API
  version: "1.0"
paths:
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Send a password reset email
      parameters:
      - description: Forgot password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Request password reset
      tags:
      - auth
  /auth/github/auth:
    get:
      description: Redirect to GitHub for authentication
      produces:
      - application/json
      responses: {}
      summary: Initiate GitHub OAuth
      tags:
      - auth
  /auth/github/callback:
    get:
      description: Process the callback from GitHub OAuth
      parameters:
      - description: Authorization code
        in: query
        name: code
        required: true
        type: string
      - description: State for CSRF protection
        in: query
        name: state
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: GitHub OAuth callback
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access token using refresh token or session ID
      parameters:
      - description: Refresh token request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.RefreshTokenResponse'
      summary: Refresh token
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset password with a valid token
      parameters:
      - description: Reset password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Reset password
      tags:
      - auth
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: SignIn with username and password
      parameters:
      - description: SignIn request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SignInResponse'
      summary: SignIn a user
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: SignUp a new user with username, email, and password
      parameters:
      - description: SignUp request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.SignUpRequest'
      produces:
      - application/json
      responses: {}
      summary: SignUp a new user
      tags:
      - auth
  /auth/verify-email/send-otp:
    post:
      consumes:
      - application/json
      description: Send a one-time password to verify email
      parameters:
      - description: Send OTP request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.SendEmailOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Send email verification OTP
      tags:
      - auth
  /auth/verify-email/status:
    get:
      consumes:
      - application/json
      description: Check if the authenticated user's email is verified
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.EmailVerificationResponse'
      security:
      - ApiKeyAuth: []
      summary: Check email verification status
      tags:
      - auth
  /auth/verify-email/verify:
    post:
      consumes:
      - application/json
      description: Verify email address using OTP
      parameters:
      - description: Verify OTP request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.VerifyEmailOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.EmailVerificationResponse'
      summary: Verify email with OTP
      tags:
      - auth
  /auth/verify-reset-token:
    post:
      consumes:
      - application/json
      description: Verify if a password reset token is valid
      parameters:
      - description: Verify token request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.VerifyResetTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Verify reset token
      tags:
      - auth
  /github/repositories:
    get:
      description: Get all GitHub repositories for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.GitHubRepositoryResponse'
            type: array
      security:
      - BearerAuth: []
      summary: List GitHub repositories
      tags:
      - github
  /github/repositories/{repo_name}:
    get:
      description: Get a specific GitHub repository by name
      parameters:
      - description: Repository name
        in: path
        name: repo_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GitHubRepositoryResponse'
      security:
      - BearerAuth: []
      summary: Get GitHub repository
      tags:
      - github
swagger: "2.0"
